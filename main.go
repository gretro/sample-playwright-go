package main

import (
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"strconv"

	"github.com/playwright-community/playwright-go"
)

var log *slog.Logger

func main() {
	log = slog.New(slog.NewJSONHandler(os.Stdout, nil))

	rawPort := os.Getenv("PORT")
	var port uint64 = 8080
	if rawPort != "" {
		var err error
		port, err = strconv.ParseUint(rawPort, 10, 16)
		if err != nil {
			log.Error("Error parsing port from environment variable PORT", slog.Any("error", err))
			os.Exit(1)
		}
	}

	log.Info("Starting server", slog.String("host", "0.0.0.0"), slog.Uint64("port", port))
	http.HandleFunc("/pdf", generatePdfAndStream)
	http.HandleFunc("/healthz", healthCheck)

	http.ListenAndServe(fmt.Sprintf(":%d", port), nil)
}

func healthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(200)
	w.Write([]byte("OK"))
}

func generatePdfAndStream(w http.ResponseWriter, r *http.Request) {
	pw, err := playwright.Run(&playwright.RunOptions{
		SkipInstallBrowsers: true,
		Verbose:             true,
		DriverDirectory:     "/root/.cache",
		Browsers: []string{
			"chromium",
		},
	})

	if err != nil {
		log.Error("Error running playwright", slog.Any("error", err))
		w.WriteHeader(500)
		w.Write([]byte(fmt.Sprintf("Error running playwright: %v", err)))
		return
	}
	defer pw.Stop()

	browser, err := pw.Chromium.Launch()
	if err != nil {
		log.Error("Error launching Chromium", slog.Any("error", err))
		w.WriteHeader(500)
		w.Write([]byte(fmt.Sprintf("Error launching Chromium: %v", err)))
		return
	}
	defer browser.Close()

	tab, err := browser.NewPage(playwright.BrowserNewPageOptions{
		JavaScriptEnabled: playwright.Bool(false),
	})
	if err != nil {
		log.Error("Error opening new page", slog.Any("error", err))
		w.WriteHeader(500)
		w.Write([]byte(fmt.Sprintf("Error opening new page: %v", err)))
		return
	}

	err = tab.SetContent("<h1>Hello, World!</h1><p>This is a test PDF generated by Playwright</p>")
	if err != nil {
		log.Error("Error setting content", slog.Any("error", err))
		w.WriteHeader(500)
		w.Write([]byte(fmt.Sprintf("Error setting content: %v", err)))
		return
	}

	data, err := tab.PDF(playwright.PagePdfOptions{
		DisplayHeaderFooter: playwright.Bool(true),
		Format:              playwright.String("Letter"),
		PrintBackground:     playwright.Bool(false),
	})
	if err != nil {
		log.Error("Error generating pdf", slog.Any("error", err))
		w.WriteHeader(500)
		w.Write([]byte(fmt.Sprintf("Error generating pdf: %v", err)))
		return
	}

	w.Header().Set("Content-Type", "application/pdf")
	w.WriteHeader(200)
	w.Write(data)

	log.Info("PDF generated and streamed")
}
